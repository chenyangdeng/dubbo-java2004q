2020-10-20 13:22:05 [ main:0 ] - [ DEBUG ] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@73a28541
2020-10-20 13:22:05 [ main:201 ] - [ INFO ] using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-10-20 13:22:05 [ main:254 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:22:05 [ main:278 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:22:05 [ main:280 ] - [ INFO ] The Infrastructure bean definition [Root bean: class [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=nullwith name [dubboConfigAliasPostProcessor] has been registered.
2020-10-20 13:22:05 [ main:284 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener , bean name : dubboLifecycleComponentApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider]; root of factory hierarchy]
2020-10-20 13:22:05 [ main:285 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:22:05 [ main:285 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener , bean name : dubboBootstrapApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider]; root of factory hierarchy]
2020-10-20 13:22:05 [ main:286 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:22:05 [ main:289 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener , bean name : dubboLifecycleComponentApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider,org.apache.dubbo.config.RegistryConfig,userService]; root of factory hierarchy]
2020-10-20 13:22:05 [ main:289 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:22:05 [ main:290 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener , bean name : dubboBootstrapApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider,org.apache.dubbo.config.RegistryConfig,userService]; root of factory hierarchy]
2020-10-20 13:22:05 [ main:290 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:22:05 [ main:301 ] - [ DEBUG ] Loaded 12 bean definitions from class path resource [applicationContext.xml]
2020-10-20 13:22:05 [ main:324 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2020-10-20 13:22:06 [ main:379 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboConfigAliasPostProcessor'
2020-10-20 13:22:06 [ main:380 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
2020-10-20 13:22:06 [ main:384 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
2020-10-20 13:22:06 [ main:386 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
2020-10-20 13:22:06 [ main:387 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
2020-10-20 13:22:06 [ main:403 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboLifecycleComponentApplicationListener'
2020-10-20 13:22:06 [ main:420 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboBootstrapApplicationListener'
2020-10-20 13:22:06 [ main:493 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:494 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:494 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:494 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:495 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:521 ] - [ DEBUG ] Creating shared instance of singleton bean 'demo-provider'
2020-10-20 13:22:06 [ main:559 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.apache.dubbo.config.RegistryConfig'
2020-10-20 13:22:06 [ main:568 ] - [ DEBUG ] Creating shared instance of singleton bean 'userService'
2020-10-20 13:22:06 [ main:570 ] - [ DEBUG ] Creating shared instance of singleton bean 'com.sofwin.service.UserService'
2020-10-20 13:22:06 [ main:607 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:737 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:904 ] - [ INFO ]  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:931 ] - [ INFO ]  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:932 ] - [ INFO ]  [DUBBO] DubboBootstrap is starting..., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:972 ] - [ INFO ]  [DUBBO] No valid ip found from environment, try to find valid host from DNS., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:1008 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:logger, try to find an extension (bean) of type org.apache.dubbo.common.logger.Logger, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:1012 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:1022 ] - [ INFO ]  [DUBBO] Export dubbo service com.sofwin.service.UserService to local registry url : injvm://127.0.0.1/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=32870&release=2.7.7&side=provider&timestamp=1603171326582, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:1023 ] - [ INFO ]  [DUBBO] Export dubbo service com.sofwin.service.UserService to url dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=32870&release=2.7.7&side=provider&timestamp=1603171326582, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:1036 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:1050 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:1090 ] - [ DEBUG ] Using SLF4J as the default logging framework
2020-10-20 13:22:06 [ main:1097 ] - [ DEBUG ] -Dio.netty.eventLoopThreads: 16
2020-10-20 13:22:06 [ main:1111 ] - [ DEBUG ] -Dio.netty.noKeySetOptimization: false
2020-10-20 13:22:06 [ main:1112 ] - [ DEBUG ] -Dio.netty.selectorAutoRebuildThreshold: 512
2020-10-20 13:22:06 [ main:1132 ] - [ DEBUG ] Platform: MacOS
2020-10-20 13:22:06 [ main:1133 ] - [ DEBUG ] -Dio.netty.noUnsafe: false
2020-10-20 13:22:06 [ main:1134 ] - [ DEBUG ] Java version: 8
2020-10-20 13:22:06 [ main:1135 ] - [ DEBUG ] sun.misc.Unsafe.theUnsafe: available
2020-10-20 13:22:06 [ main:1137 ] - [ DEBUG ] sun.misc.Unsafe.copyMemory: available
2020-10-20 13:22:06 [ main:1138 ] - [ DEBUG ] java.nio.Buffer.address: available
2020-10-20 13:22:06 [ main:1139 ] - [ DEBUG ] direct buffer constructor: available
2020-10-20 13:22:06 [ main:1141 ] - [ DEBUG ] java.nio.Bits.unaligned: available, true
2020-10-20 13:22:06 [ main:1142 ] - [ DEBUG ] jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable prior to Java9
2020-10-20 13:22:06 [ main:1142 ] - [ DEBUG ] java.nio.DirectByteBuffer.<init>(long, int): available
2020-10-20 13:22:06 [ main:1142 ] - [ DEBUG ] sun.misc.Unsafe: available
2020-10-20 13:22:06 [ main:1143 ] - [ DEBUG ] -Dio.netty.tmpdir: /var/folders/5_/r8qvkv390xg943gpmgly5w1h0000gn/T (java.io.tmpdir)
2020-10-20 13:22:06 [ main:1143 ] - [ DEBUG ] -Dio.netty.bitMode: 64 (sun.arch.data.model)
2020-10-20 13:22:06 [ main:1144 ] - [ DEBUG ] -Dio.netty.noPreferDirect: false
2020-10-20 13:22:06 [ main:1145 ] - [ DEBUG ] -Dio.netty.maxDirectMemory: 3817865216 bytes
2020-10-20 13:22:06 [ main:1145 ] - [ DEBUG ] -Dio.netty.uninitializedArrayAllocationThreshold: -1
2020-10-20 13:22:06 [ main:1146 ] - [ DEBUG ] java.nio.ByteBuffer.cleaner(): available
2020-10-20 13:22:06 [ main:1152 ] - [ DEBUG ] org.jctools-core.MpscChunkedArrayQueue: available
2020-10-20 13:22:06 [ main:1187 ] - [ DEBUG ] -Dio.netty.leakDetection.level: simple
2020-10-20 13:22:06 [ main:1188 ] - [ DEBUG ] -Dio.netty.leakDetection.targetRecords: 4
2020-10-20 13:22:06 [ main:1191 ] - [ DEBUG ] -Dio.netty.allocator.numHeapArenas: 16
2020-10-20 13:22:06 [ main:1192 ] - [ DEBUG ] -Dio.netty.allocator.numDirectArenas: 16
2020-10-20 13:22:06 [ main:1193 ] - [ DEBUG ] -Dio.netty.allocator.pageSize: 8192
2020-10-20 13:22:06 [ main:1193 ] - [ DEBUG ] -Dio.netty.allocator.maxOrder: 11
2020-10-20 13:22:06 [ main:1193 ] - [ DEBUG ] -Dio.netty.allocator.chunkSize: 16777216
2020-10-20 13:22:06 [ main:1193 ] - [ DEBUG ] -Dio.netty.allocator.tinyCacheSize: 512
2020-10-20 13:22:06 [ main:1193 ] - [ DEBUG ] -Dio.netty.allocator.smallCacheSize: 256
2020-10-20 13:22:06 [ main:1193 ] - [ DEBUG ] -Dio.netty.allocator.normalCacheSize: 64
2020-10-20 13:22:06 [ main:1194 ] - [ DEBUG ] -Dio.netty.allocator.maxCachedBufferCapacity: 32768
2020-10-20 13:22:06 [ main:1194 ] - [ DEBUG ] -Dio.netty.allocator.cacheTrimInterval: 8192
2020-10-20 13:22:06 [ main:1194 ] - [ DEBUG ] -Dio.netty.allocator.useCacheForAllThreads: true
2020-10-20 13:22:06 [ main:1196 ] - [ DEBUG ] -Dio.netty.threadLocalMap.stringBuilder.initialSize: 1024
2020-10-20 13:22:06 [ main:1197 ] - [ DEBUG ] -Dio.netty.threadLocalMap.stringBuilder.maxSize: 4096
2020-10-20 13:22:06 [ main:1222 ] - [ DEBUG ] -Dio.netty.processId: 32870 (auto-detected)
2020-10-20 13:22:06 [ main:1225 ] - [ DEBUG ] -Djava.net.preferIPv4Stack: false
2020-10-20 13:22:06 [ main:1225 ] - [ DEBUG ] -Djava.net.preferIPv6Addresses: false
2020-10-20 13:22:06 [ main:1227 ] - [ DEBUG ] Loopback interface: lo0 (lo0, 0:0:0:0:0:0:0:1%lo0)
2020-10-20 13:22:06 [ main:1228 ] - [ DEBUG ] Failed to get SOMAXCONN from sysctl and file /proc/sys/net/core/somaxconn. Default: 128
2020-10-20 13:22:06 [ main:1230 ] - [ DEBUG ] -Dio.netty.machineId: ac:de:48:ff:fe:00:11:22 (auto-detected)
2020-10-20 13:22:06 [ main:1246 ] - [ DEBUG ] -Dio.netty.allocator.type: pooled
2020-10-20 13:22:06 [ main:1246 ] - [ DEBUG ] -Dio.netty.threadLocalDirectBufferSize: 0
2020-10-20 13:22:06 [ main:1247 ] - [ DEBUG ] -Dio.netty.maxThreadLocalCharBufferSize: 16384
2020-10-20 13:22:06 [ main:1288 ] - [ INFO ]  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:1292 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:1345 ] - [ INFO ]  [DUBBO] Dubbo service[null] mapped to interface name[com.sofwin.service.UserService]., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:1354 ] - [ INFO ]  [DUBBO] DubboBootstrap is ready., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:06 [ main:1354 ] - [ INFO ]  [DUBBO] DubboBootstrap has started., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:09 [ DubboShutdownHook:4308 ] - [ INFO ]  [DUBBO] Run shutdown hook now., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:09 [ SpringContextShutdownHook:4309 ] - [ DEBUG ] Closing org.springframework.context.support.ClassPathXmlApplicationContext@73a28541, started on Tue Oct 20 13:22:05 CST 2020
2020-10-20 13:22:09 [ DubboShutdownHook:4314 ] - [ INFO ]  [DUBBO] Close all registries [], dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:09 [ DubboShutdownHook:4315 ] - [ INFO ]  [DUBBO] Close dubbo server: /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:09 [ DubboShutdownHook:4316 ] - [ INFO ]  [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:09 [ DubboShutdownHook:4318 ] - [ INFO ]  [DUBBO] Unexport service: dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=32870&release=2.7.7&side=provider&timestamp=1603171326582, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:09 [ DubboShutdownHook:4319 ] - [ INFO ]  [DUBBO] Unexport service: injvm://127.0.0.1/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=32870&release=2.7.7&side=provider&timestamp=1603171326582, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:09 [ DubboShutdownHook:4329 ] - [ DEBUG ]  [DUBBO] DubboBootstrap's all ServiceDiscoveries have been destroyed., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:09 [ DubboShutdownHook:4329 ] - [ DEBUG ]  [DUBBO] DubboBootstrap's configs have been clear., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:09 [ DubboShutdownHook:4330 ] - [ INFO ]  [DUBBO] DubboBootstrap is about to shutdown..., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:22:09 [ DubboShutdownHook:4330 ] - [ INFO ]  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:31 [ main:0 ] - [ DEBUG ] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@73a28541
2020-10-20 13:25:32 [ main:177 ] - [ INFO ] using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-10-20 13:25:32 [ main:220 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:25:32 [ main:241 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:25:32 [ main:242 ] - [ INFO ] The Infrastructure bean definition [Root bean: class [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=nullwith name [dubboConfigAliasPostProcessor] has been registered.
2020-10-20 13:25:32 [ main:248 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener , bean name : dubboLifecycleComponentApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider]; root of factory hierarchy]
2020-10-20 13:25:32 [ main:248 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:25:32 [ main:249 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener , bean name : dubboBootstrapApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider]; root of factory hierarchy]
2020-10-20 13:25:32 [ main:249 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:25:32 [ main:252 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener , bean name : dubboLifecycleComponentApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider,org.apache.dubbo.config.RegistryConfig,userService]; root of factory hierarchy]
2020-10-20 13:25:32 [ main:253 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:25:32 [ main:253 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener , bean name : dubboBootstrapApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider,org.apache.dubbo.config.RegistryConfig,userService]; root of factory hierarchy]
2020-10-20 13:25:32 [ main:254 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:25:32 [ main:263 ] - [ DEBUG ] Loaded 12 bean definitions from class path resource [applicationContext.xml]
2020-10-20 13:25:32 [ main:280 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2020-10-20 13:25:32 [ main:325 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboConfigAliasPostProcessor'
2020-10-20 13:25:32 [ main:327 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
2020-10-20 13:25:32 [ main:329 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
2020-10-20 13:25:32 [ main:331 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
2020-10-20 13:25:32 [ main:332 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
2020-10-20 13:25:32 [ main:339 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboLifecycleComponentApplicationListener'
2020-10-20 13:25:32 [ main:345 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboBootstrapApplicationListener'
2020-10-20 13:25:32 [ main:402 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:402 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:403 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:403 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:403 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:425 ] - [ DEBUG ] Creating shared instance of singleton bean 'demo-provider'
2020-10-20 13:25:32 [ main:476 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.apache.dubbo.config.RegistryConfig'
2020-10-20 13:25:32 [ main:485 ] - [ DEBUG ] Creating shared instance of singleton bean 'userService'
2020-10-20 13:25:32 [ main:486 ] - [ DEBUG ] Creating shared instance of singleton bean 'com.sofwin.service.UserService'
2020-10-20 13:25:32 [ main:516 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:610 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:791 ] - [ INFO ]  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:807 ] - [ INFO ]  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:807 ] - [ INFO ]  [DUBBO] DubboBootstrap is starting..., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:856 ] - [ INFO ]  [DUBBO] No valid ip found from environment, try to find valid host from DNS., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:905 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:logger, try to find an extension (bean) of type org.apache.dubbo.common.logger.Logger, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:912 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:926 ] - [ INFO ]  [DUBBO] Export dubbo service com.sofwin.service.UserService to local registry url : injvm://127.0.0.1/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=32903&release=2.7.7&side=provider&timestamp=1603171532693, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:927 ] - [ INFO ]  [DUBBO] Export dubbo service com.sofwin.service.UserService to url dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=32903&release=2.7.7&side=provider&timestamp=1603171532693, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:941 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:957 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:32 [ main:990 ] - [ DEBUG ] Using SLF4J as the default logging framework
2020-10-20 13:25:32 [ main:997 ] - [ DEBUG ] -Dio.netty.eventLoopThreads: 16
2020-10-20 13:25:32 [ main:1013 ] - [ DEBUG ] -Dio.netty.noKeySetOptimization: false
2020-10-20 13:25:32 [ main:1014 ] - [ DEBUG ] -Dio.netty.selectorAutoRebuildThreshold: 512
2020-10-20 13:25:32 [ main:1026 ] - [ DEBUG ] Platform: MacOS
2020-10-20 13:25:32 [ main:1027 ] - [ DEBUG ] -Dio.netty.noUnsafe: false
2020-10-20 13:25:32 [ main:1028 ] - [ DEBUG ] Java version: 8
2020-10-20 13:25:32 [ main:1029 ] - [ DEBUG ] sun.misc.Unsafe.theUnsafe: available
2020-10-20 13:25:32 [ main:1030 ] - [ DEBUG ] sun.misc.Unsafe.copyMemory: available
2020-10-20 13:25:32 [ main:1031 ] - [ DEBUG ] java.nio.Buffer.address: available
2020-10-20 13:25:32 [ main:1031 ] - [ DEBUG ] direct buffer constructor: available
2020-10-20 13:25:32 [ main:1032 ] - [ DEBUG ] java.nio.Bits.unaligned: available, true
2020-10-20 13:25:32 [ main:1033 ] - [ DEBUG ] jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable prior to Java9
2020-10-20 13:25:32 [ main:1033 ] - [ DEBUG ] java.nio.DirectByteBuffer.<init>(long, int): available
2020-10-20 13:25:32 [ main:1033 ] - [ DEBUG ] sun.misc.Unsafe: available
2020-10-20 13:25:32 [ main:1034 ] - [ DEBUG ] -Dio.netty.tmpdir: /var/folders/5_/r8qvkv390xg943gpmgly5w1h0000gn/T (java.io.tmpdir)
2020-10-20 13:25:32 [ main:1034 ] - [ DEBUG ] -Dio.netty.bitMode: 64 (sun.arch.data.model)
2020-10-20 13:25:32 [ main:1035 ] - [ DEBUG ] -Dio.netty.noPreferDirect: false
2020-10-20 13:25:32 [ main:1036 ] - [ DEBUG ] -Dio.netty.maxDirectMemory: 3817865216 bytes
2020-10-20 13:25:32 [ main:1036 ] - [ DEBUG ] -Dio.netty.uninitializedArrayAllocationThreshold: -1
2020-10-20 13:25:32 [ main:1037 ] - [ DEBUG ] java.nio.ByteBuffer.cleaner(): available
2020-10-20 13:25:32 [ main:1042 ] - [ DEBUG ] org.jctools-core.MpscChunkedArrayQueue: available
2020-10-20 13:25:32 [ main:1086 ] - [ DEBUG ] -Dio.netty.leakDetection.level: simple
2020-10-20 13:25:32 [ main:1086 ] - [ DEBUG ] -Dio.netty.leakDetection.targetRecords: 4
2020-10-20 13:25:32 [ main:1090 ] - [ DEBUG ] -Dio.netty.allocator.numHeapArenas: 16
2020-10-20 13:25:32 [ main:1090 ] - [ DEBUG ] -Dio.netty.allocator.numDirectArenas: 16
2020-10-20 13:25:32 [ main:1090 ] - [ DEBUG ] -Dio.netty.allocator.pageSize: 8192
2020-10-20 13:25:32 [ main:1091 ] - [ DEBUG ] -Dio.netty.allocator.maxOrder: 11
2020-10-20 13:25:32 [ main:1091 ] - [ DEBUG ] -Dio.netty.allocator.chunkSize: 16777216
2020-10-20 13:25:32 [ main:1091 ] - [ DEBUG ] -Dio.netty.allocator.tinyCacheSize: 512
2020-10-20 13:25:32 [ main:1091 ] - [ DEBUG ] -Dio.netty.allocator.smallCacheSize: 256
2020-10-20 13:25:32 [ main:1091 ] - [ DEBUG ] -Dio.netty.allocator.normalCacheSize: 64
2020-10-20 13:25:32 [ main:1091 ] - [ DEBUG ] -Dio.netty.allocator.maxCachedBufferCapacity: 32768
2020-10-20 13:25:32 [ main:1091 ] - [ DEBUG ] -Dio.netty.allocator.cacheTrimInterval: 8192
2020-10-20 13:25:32 [ main:1091 ] - [ DEBUG ] -Dio.netty.allocator.useCacheForAllThreads: true
2020-10-20 13:25:32 [ main:1095 ] - [ DEBUG ] -Dio.netty.threadLocalMap.stringBuilder.initialSize: 1024
2020-10-20 13:25:32 [ main:1095 ] - [ DEBUG ] -Dio.netty.threadLocalMap.stringBuilder.maxSize: 4096
2020-10-20 13:25:32 [ main:1122 ] - [ DEBUG ] -Dio.netty.processId: 32903 (auto-detected)
2020-10-20 13:25:32 [ main:1124 ] - [ DEBUG ] -Djava.net.preferIPv4Stack: false
2020-10-20 13:25:32 [ main:1124 ] - [ DEBUG ] -Djava.net.preferIPv6Addresses: false
2020-10-20 13:25:33 [ main:1128 ] - [ DEBUG ] Loopback interface: lo0 (lo0, 0:0:0:0:0:0:0:1%lo0)
2020-10-20 13:25:33 [ main:1129 ] - [ DEBUG ] Failed to get SOMAXCONN from sysctl and file /proc/sys/net/core/somaxconn. Default: 128
2020-10-20 13:25:33 [ main:1133 ] - [ DEBUG ] -Dio.netty.machineId: ac:de:48:ff:fe:00:11:22 (auto-detected)
2020-10-20 13:25:33 [ main:1159 ] - [ DEBUG ] -Dio.netty.allocator.type: pooled
2020-10-20 13:25:33 [ main:1160 ] - [ DEBUG ] -Dio.netty.threadLocalDirectBufferSize: 0
2020-10-20 13:25:33 [ main:1160 ] - [ DEBUG ] -Dio.netty.maxThreadLocalCharBufferSize: 16384
2020-10-20 13:25:33 [ main:1211 ] - [ INFO ]  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:33 [ main:1216 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:33 [ main:1265 ] - [ INFO ]  [DUBBO] Dubbo service[null] mapped to interface name[com.sofwin.service.UserService]., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:33 [ main:1273 ] - [ INFO ]  [DUBBO] DubboBootstrap is ready., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:25:33 [ main:1273 ] - [ INFO ]  [DUBBO] DubboBootstrap has started., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:28:55 [ DubboShutdownHook:203168 ] - [ INFO ]  [DUBBO] Run shutdown hook now., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:28:55 [ SpringContextShutdownHook:203169 ] - [ DEBUG ] Closing org.springframework.context.support.ClassPathXmlApplicationContext@73a28541, started on Tue Oct 20 13:25:31 CST 2020
2020-10-20 13:28:55 [ DubboShutdownHook:203171 ] - [ INFO ]  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:28:55 [ SpringContextShutdownHook:203172 ] - [ INFO ]  [DUBBO] Close all registries [], dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:28:55 [ SpringContextShutdownHook:203172 ] - [ INFO ]  [DUBBO] Close dubbo server: /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:28:55 [ SpringContextShutdownHook:203173 ] - [ INFO ]  [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:28:55 [ SpringContextShutdownHook:203175 ] - [ INFO ]  [DUBBO] Unexport service: dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=32903&release=2.7.7&side=provider&timestamp=1603171532693, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:28:55 [ SpringContextShutdownHook:203175 ] - [ INFO ]  [DUBBO] Unexport service: injvm://127.0.0.1/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=32903&release=2.7.7&side=provider&timestamp=1603171532693, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:28:55 [ SpringContextShutdownHook:203181 ] - [ DEBUG ]  [DUBBO] DubboBootstrap's all ServiceDiscoveries have been destroyed., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:28:55 [ SpringContextShutdownHook:203181 ] - [ DEBUG ]  [DUBBO] DubboBootstrap's configs have been clear., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:28:55 [ SpringContextShutdownHook:203182 ] - [ INFO ]  [DUBBO] DubboBootstrap is about to shutdown..., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:51 [ main:0 ] - [ DEBUG ] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@73a28541
2020-10-20 13:41:51 [ main:186 ] - [ INFO ] using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-10-20 13:41:51 [ main:245 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:41:51 [ main:272 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:41:51 [ main:273 ] - [ INFO ] The Infrastructure bean definition [Root bean: class [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=nullwith name [dubboConfigAliasPostProcessor] has been registered.
2020-10-20 13:41:51 [ main:279 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener , bean name : dubboLifecycleComponentApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider]; root of factory hierarchy]
2020-10-20 13:41:51 [ main:280 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:41:51 [ main:281 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener , bean name : dubboBootstrapApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider]; root of factory hierarchy]
2020-10-20 13:41:51 [ main:282 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:41:51 [ main:285 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener , bean name : dubboLifecycleComponentApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider,org.apache.dubbo.config.RegistryConfig,userService]; root of factory hierarchy]
2020-10-20 13:41:51 [ main:285 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:41:51 [ main:285 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener , bean name : dubboBootstrapApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider,org.apache.dubbo.config.RegistryConfig,userService]; root of factory hierarchy]
2020-10-20 13:41:51 [ main:286 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:41:51 [ main:299 ] - [ DEBUG ] Loaded 12 bean definitions from class path resource [applicationContext.xml]
2020-10-20 13:41:51 [ main:324 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2020-10-20 13:41:51 [ main:381 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboConfigAliasPostProcessor'
2020-10-20 13:41:51 [ main:383 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
2020-10-20 13:41:51 [ main:386 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
2020-10-20 13:41:51 [ main:389 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
2020-10-20 13:41:51 [ main:391 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
2020-10-20 13:41:51 [ main:404 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboLifecycleComponentApplicationListener'
2020-10-20 13:41:51 [ main:414 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboBootstrapApplicationListener'
2020-10-20 13:41:51 [ main:508 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:51 [ main:509 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:51 [ main:510 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:51 [ main:511 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:51 [ main:511 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:51 [ main:535 ] - [ DEBUG ] Creating shared instance of singleton bean 'demo-provider'
2020-10-20 13:41:51 [ main:581 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.apache.dubbo.config.RegistryConfig'
2020-10-20 13:41:51 [ main:589 ] - [ DEBUG ] Creating shared instance of singleton bean 'userService'
2020-10-20 13:41:51 [ main:591 ] - [ DEBUG ] Creating shared instance of singleton bean 'com.sofwin.service.UserService'
2020-10-20 13:41:51 [ main:644 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:51 [ main:784 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:986 ] - [ INFO ]  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1003 ] - [ INFO ]  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1003 ] - [ INFO ]  [DUBBO] DubboBootstrap is starting..., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1041 ] - [ INFO ]  [DUBBO] No valid ip found from environment, try to find valid host from DNS., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1074 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:logger, try to find an extension (bean) of type org.apache.dubbo.common.logger.Logger, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1077 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1086 ] - [ INFO ]  [DUBBO] Export dubbo service com.sofwin.service.UserService to local registry url : injvm://127.0.0.1/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=33085&release=2.7.7&side=provider&timestamp=1603172512216, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1087 ] - [ INFO ]  [DUBBO] Export dubbo service com.sofwin.service.UserService to url dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=33085&release=2.7.7&side=provider&timestamp=1603172512216, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1099 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1114 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1153 ] - [ DEBUG ] Using SLF4J as the default logging framework
2020-10-20 13:41:52 [ main:1160 ] - [ DEBUG ] -Dio.netty.eventLoopThreads: 16
2020-10-20 13:41:52 [ main:1179 ] - [ DEBUG ] -Dio.netty.noKeySetOptimization: false
2020-10-20 13:41:52 [ main:1179 ] - [ DEBUG ] -Dio.netty.selectorAutoRebuildThreshold: 512
2020-10-20 13:41:52 [ main:1192 ] - [ DEBUG ] Platform: MacOS
2020-10-20 13:41:52 [ main:1194 ] - [ DEBUG ] -Dio.netty.noUnsafe: false
2020-10-20 13:41:52 [ main:1194 ] - [ DEBUG ] Java version: 8
2020-10-20 13:41:52 [ main:1196 ] - [ DEBUG ] sun.misc.Unsafe.theUnsafe: available
2020-10-20 13:41:52 [ main:1197 ] - [ DEBUG ] sun.misc.Unsafe.copyMemory: available
2020-10-20 13:41:52 [ main:1199 ] - [ DEBUG ] java.nio.Buffer.address: available
2020-10-20 13:41:52 [ main:1201 ] - [ DEBUG ] direct buffer constructor: available
2020-10-20 13:41:52 [ main:1203 ] - [ DEBUG ] java.nio.Bits.unaligned: available, true
2020-10-20 13:41:52 [ main:1204 ] - [ DEBUG ] jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable prior to Java9
2020-10-20 13:41:52 [ main:1205 ] - [ DEBUG ] java.nio.DirectByteBuffer.<init>(long, int): available
2020-10-20 13:41:52 [ main:1205 ] - [ DEBUG ] sun.misc.Unsafe: available
2020-10-20 13:41:52 [ main:1206 ] - [ DEBUG ] -Dio.netty.tmpdir: /var/folders/5_/r8qvkv390xg943gpmgly5w1h0000gn/T (java.io.tmpdir)
2020-10-20 13:41:52 [ main:1207 ] - [ DEBUG ] -Dio.netty.bitMode: 64 (sun.arch.data.model)
2020-10-20 13:41:52 [ main:1209 ] - [ DEBUG ] -Dio.netty.noPreferDirect: false
2020-10-20 13:41:52 [ main:1210 ] - [ DEBUG ] -Dio.netty.maxDirectMemory: 3817865216 bytes
2020-10-20 13:41:52 [ main:1210 ] - [ DEBUG ] -Dio.netty.uninitializedArrayAllocationThreshold: -1
2020-10-20 13:41:52 [ main:1212 ] - [ DEBUG ] java.nio.ByteBuffer.cleaner(): available
2020-10-20 13:41:52 [ main:1221 ] - [ DEBUG ] org.jctools-core.MpscChunkedArrayQueue: available
2020-10-20 13:41:52 [ main:1277 ] - [ DEBUG ] -Dio.netty.leakDetection.level: simple
2020-10-20 13:41:52 [ main:1278 ] - [ DEBUG ] -Dio.netty.leakDetection.targetRecords: 4
2020-10-20 13:41:52 [ main:1282 ] - [ DEBUG ] -Dio.netty.allocator.numHeapArenas: 16
2020-10-20 13:41:52 [ main:1283 ] - [ DEBUG ] -Dio.netty.allocator.numDirectArenas: 16
2020-10-20 13:41:52 [ main:1283 ] - [ DEBUG ] -Dio.netty.allocator.pageSize: 8192
2020-10-20 13:41:52 [ main:1284 ] - [ DEBUG ] -Dio.netty.allocator.maxOrder: 11
2020-10-20 13:41:52 [ main:1285 ] - [ DEBUG ] -Dio.netty.allocator.chunkSize: 16777216
2020-10-20 13:41:52 [ main:1286 ] - [ DEBUG ] -Dio.netty.allocator.tinyCacheSize: 512
2020-10-20 13:41:52 [ main:1286 ] - [ DEBUG ] -Dio.netty.allocator.smallCacheSize: 256
2020-10-20 13:41:52 [ main:1286 ] - [ DEBUG ] -Dio.netty.allocator.normalCacheSize: 64
2020-10-20 13:41:52 [ main:1287 ] - [ DEBUG ] -Dio.netty.allocator.maxCachedBufferCapacity: 32768
2020-10-20 13:41:52 [ main:1288 ] - [ DEBUG ] -Dio.netty.allocator.cacheTrimInterval: 8192
2020-10-20 13:41:52 [ main:1288 ] - [ DEBUG ] -Dio.netty.allocator.useCacheForAllThreads: true
2020-10-20 13:41:52 [ main:1290 ] - [ DEBUG ] -Dio.netty.threadLocalMap.stringBuilder.initialSize: 1024
2020-10-20 13:41:52 [ main:1291 ] - [ DEBUG ] -Dio.netty.threadLocalMap.stringBuilder.maxSize: 4096
2020-10-20 13:41:52 [ main:1319 ] - [ DEBUG ] -Dio.netty.processId: 33085 (auto-detected)
2020-10-20 13:41:52 [ main:1320 ] - [ DEBUG ] -Djava.net.preferIPv4Stack: false
2020-10-20 13:41:52 [ main:1321 ] - [ DEBUG ] -Djava.net.preferIPv6Addresses: false
2020-10-20 13:41:52 [ main:1323 ] - [ DEBUG ] Loopback interface: lo0 (lo0, 0:0:0:0:0:0:0:1%lo0)
2020-10-20 13:41:52 [ main:1324 ] - [ DEBUG ] Failed to get SOMAXCONN from sysctl and file /proc/sys/net/core/somaxconn. Default: 128
2020-10-20 13:41:52 [ main:1328 ] - [ DEBUG ] -Dio.netty.machineId: ac:de:48:ff:fe:00:11:22 (auto-detected)
2020-10-20 13:41:52 [ main:1346 ] - [ DEBUG ] -Dio.netty.allocator.type: pooled
2020-10-20 13:41:52 [ main:1347 ] - [ DEBUG ] -Dio.netty.threadLocalDirectBufferSize: 0
2020-10-20 13:41:52 [ main:1347 ] - [ DEBUG ] -Dio.netty.maxThreadLocalCharBufferSize: 16384
2020-10-20 13:41:52 [ main:1397 ] - [ INFO ]  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1403 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1471 ] - [ INFO ]  [DUBBO] Dubbo service[null] mapped to interface name[com.sofwin.service.UserService]., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1478 ] - [ INFO ]  [DUBBO] DubboBootstrap is ready., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:41:52 [ main:1478 ] - [ INFO ]  [DUBBO] DubboBootstrap has started., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:01 [ NettyServerWorker-3-1:10382 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:51381 -> /192.168.0.130:20880 is established., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:01 [ NettyServerWorker-3-1:10551 ] - [ DEBUG ] -Dio.netty.recycler.maxCapacityPerThread: 4096
2020-10-20 13:42:01 [ NettyServerWorker-3-1:10551 ] - [ DEBUG ] -Dio.netty.recycler.maxSharedCapacityFactor: 2
2020-10-20 13:42:01 [ NettyServerWorker-3-1:10552 ] - [ DEBUG ] -Dio.netty.recycler.linkCapacity: 16
2020-10-20 13:42:01 [ NettyServerWorker-3-1:10552 ] - [ DEBUG ] -Dio.netty.recycler.ratio: 8
2020-10-20 13:42:01 [ NettyServerWorker-3-1:10557 ] - [ DEBUG ] -Dio.netty.buffer.bytebuf.checkAccessible: true
2020-10-20 13:42:01 [ NettyServerWorker-3-1:10558 ] - [ DEBUG ] Loaded default ResourceLeakDetector: io.netty.util.ResourceLeakDetector@2945172b
2020-10-20 13:42:01 [ DubboServerHandler-192.168.0.130:20880-thread-2:10608 ] - [ DEBUG ]  [DUBBO] Decode decodeable message org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:01 [ NettyServerWorker-3-1:10639 ] - [ WARN ]  [DUBBO] All clients has disconnected from /192.168.0.130:20880. You can graceful shutdown now., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:01 [ NettyServerWorker-3-1:10640 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:51381 -> /192.168.0.130:20880 is disconnected., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:01 [ DubboServerHandler-192.168.0.130:20880-thread-3:10640 ] - [ DEBUG ]  [DUBBO] disconnected from /192.168.0.130:51381,url:dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.sofwin.service.UserService&methods=hello&pid=33085&release=2.7.7&side=provider&threadname=DubboServerHandler-192.168.0.130:20880&timestamp=1603172512216, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:22 [ NettyServerWorker-3-2:31801 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:51440 -> /192.168.0.130:20880 is established., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:23 [ DubboServerHandler-192.168.0.130:20880-thread-5:31987 ] - [ DEBUG ]  [DUBBO] Decode decodeable message org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:23 [ NettyServerWorker-3-2:32006 ] - [ WARN ]  [DUBBO] All clients has disconnected from /192.168.0.130:20880. You can graceful shutdown now., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:23 [ NettyServerWorker-3-2:32006 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:51440 -> /192.168.0.130:20880 is disconnected., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:23 [ DubboServerHandler-192.168.0.130:20880-thread-6:32006 ] - [ DEBUG ]  [DUBBO] disconnected from /192.168.0.130:51440,url:dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.sofwin.service.UserService&methods=hello&pid=33085&release=2.7.7&side=provider&threadname=DubboServerHandler-192.168.0.130:20880&timestamp=1603172512216, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:42 [ NettyServerWorker-3-3:51790 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:51495 -> /192.168.0.130:20880 is established., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:43 [ DubboServerHandler-192.168.0.130:20880-thread-8:51970 ] - [ DEBUG ]  [DUBBO] Decode decodeable message org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:43 [ NettyServerWorker-3-3:51985 ] - [ WARN ]  [DUBBO] All clients has disconnected from /192.168.0.130:20880. You can graceful shutdown now., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:43 [ NettyServerWorker-3-3:51985 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:51495 -> /192.168.0.130:20880 is disconnected., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:42:43 [ DubboServerHandler-192.168.0.130:20880-thread-9:51985 ] - [ DEBUG ]  [DUBBO] disconnected from /192.168.0.130:51495,url:dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.sofwin.service.UserService&methods=hello&pid=33085&release=2.7.7&side=provider&threadname=DubboServerHandler-192.168.0.130:20880&timestamp=1603172512216, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:43:22 [ NettyServerWorker-3-4:91530 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:51600 -> /192.168.0.130:20880 is established., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:43:22 [ DubboServerHandler-192.168.0.130:20880-thread-11:91697 ] - [ DEBUG ]  [DUBBO] Decode decodeable message org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:43:22 [ NettyServerWorker-3-4:91712 ] - [ WARN ]  [DUBBO] All clients has disconnected from /192.168.0.130:20880. You can graceful shutdown now., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:43:22 [ NettyServerWorker-3-4:91712 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:51600 -> /192.168.0.130:20880 is disconnected., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:43:22 [ DubboServerHandler-192.168.0.130:20880-thread-12:91713 ] - [ DEBUG ]  [DUBBO] disconnected from /192.168.0.130:51600,url:dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.sofwin.service.UserService&methods=hello&pid=33085&release=2.7.7&side=provider&threadname=DubboServerHandler-192.168.0.130:20880&timestamp=1603172512216, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:20 [ DubboShutdownHook:389750 ] - [ INFO ]  [DUBBO] Run shutdown hook now., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:20 [ SpringContextShutdownHook:389751 ] - [ DEBUG ] Closing org.springframework.context.support.ClassPathXmlApplicationContext@73a28541, started on Tue Oct 20 13:41:51 CST 2020
2020-10-20 13:48:20 [ DubboShutdownHook:389753 ] - [ INFO ]  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:20 [ SpringContextShutdownHook:389755 ] - [ INFO ]  [DUBBO] Close all registries [], dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:20 [ SpringContextShutdownHook:389755 ] - [ INFO ]  [DUBBO] Close dubbo server: /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:20 [ SpringContextShutdownHook:389757 ] - [ INFO ]  [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:20 [ SpringContextShutdownHook:389758 ] - [ INFO ]  [DUBBO] Unexport service: dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=33085&release=2.7.7&side=provider&timestamp=1603172512216, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:20 [ SpringContextShutdownHook:389759 ] - [ INFO ]  [DUBBO] Unexport service: injvm://127.0.0.1/com.sofwin.service.UserService?anyhost=true&application=demo-provider&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=33085&release=2.7.7&side=provider&timestamp=1603172512216, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:20 [ NettyServerWorker-3-2:389761 ] - [ DEBUG ] Freed 2 thread-local buffer(s) from thread: NettyServerWorker-3-2
2020-10-20 13:48:20 [ NettyServerWorker-3-4:389761 ] - [ DEBUG ] Freed 2 thread-local buffer(s) from thread: NettyServerWorker-3-4
2020-10-20 13:48:20 [ NettyServerWorker-3-3:389761 ] - [ DEBUG ] Freed 2 thread-local buffer(s) from thread: NettyServerWorker-3-3
2020-10-20 13:48:20 [ NettyServerWorker-3-1:389763 ] - [ DEBUG ] Freed 2 thread-local buffer(s) from thread: NettyServerWorker-3-1
2020-10-20 13:48:20 [ SpringContextShutdownHook:389766 ] - [ DEBUG ]  [DUBBO] DubboBootstrap's all ServiceDiscoveries have been destroyed., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:20 [ SpringContextShutdownHook:389767 ] - [ DEBUG ]  [DUBBO] DubboBootstrap's configs have been clear., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:20 [ SpringContextShutdownHook:389767 ] - [ INFO ]  [DUBBO] DubboBootstrap is about to shutdown..., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:30 [ main:0 ] - [ DEBUG ] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@73a28541
2020-10-20 13:48:31 [ main:188 ] - [ INFO ] using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-10-20 13:48:31 [ main:231 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:48:31 [ main:253 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:48:31 [ main:254 ] - [ INFO ] The Infrastructure bean definition [Root bean: class [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=nullwith name [dubboConfigAliasPostProcessor] has been registered.
2020-10-20 13:48:31 [ main:259 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener , bean name : dubboLifecycleComponentApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider02]; root of factory hierarchy]
2020-10-20 13:48:31 [ main:259 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:48:31 [ main:259 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener , bean name : dubboBootstrapApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider02]; root of factory hierarchy]
2020-10-20 13:48:31 [ main:260 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:48:31 [ main:262 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener , bean name : dubboLifecycleComponentApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider02,org.apache.dubbo.config.RegistryConfig,userService]; root of factory hierarchy]
2020-10-20 13:48:31 [ main:263 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:48:31 [ main:263 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener , bean name : dubboBootstrapApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-provider02,org.apache.dubbo.config.RegistryConfig,userService]; root of factory hierarchy]
2020-10-20 13:48:31 [ main:263 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:48:31 [ main:272 ] - [ DEBUG ] Loaded 12 bean definitions from class path resource [applicationContext.xml]
2020-10-20 13:48:31 [ main:292 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2020-10-20 13:48:31 [ main:348 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboConfigAliasPostProcessor'
2020-10-20 13:48:31 [ main:350 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
2020-10-20 13:48:31 [ main:353 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
2020-10-20 13:48:31 [ main:355 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
2020-10-20 13:48:31 [ main:356 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
2020-10-20 13:48:31 [ main:365 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboLifecycleComponentApplicationListener'
2020-10-20 13:48:31 [ main:375 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboBootstrapApplicationListener'
2020-10-20 13:48:31 [ main:453 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:453 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:454 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:454 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:454 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:477 ] - [ DEBUG ] Creating shared instance of singleton bean 'demo-provider02'
2020-10-20 13:48:31 [ main:519 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.apache.dubbo.config.RegistryConfig'
2020-10-20 13:48:31 [ main:527 ] - [ DEBUG ] Creating shared instance of singleton bean 'userService'
2020-10-20 13:48:31 [ main:527 ] - [ DEBUG ] Creating shared instance of singleton bean 'com.sofwin.service.UserService'
2020-10-20 13:48:31 [ main:559 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:676 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:832 ] - [ INFO ]  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:847 ] - [ INFO ]  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:850 ] - [ INFO ]  [DUBBO] DubboBootstrap is starting..., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:894 ] - [ INFO ]  [DUBBO] No valid ip found from environment, try to find valid host from DNS., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:940 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:logger, try to find an extension (bean) of type org.apache.dubbo.common.logger.Logger, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:944 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:957 ] - [ INFO ]  [DUBBO] Export dubbo service com.sofwin.service.UserService to local registry url : injvm://127.0.0.1/com.sofwin.service.UserService?anyhost=true&application=demo-provider02&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=33162&release=2.7.7&side=provider&timestamp=1603172911833, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:958 ] - [ INFO ]  [DUBBO] Export dubbo service com.sofwin.service.UserService to url dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider02&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=33162&release=2.7.7&side=provider&timestamp=1603172911833, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:974 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:991 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:31 [ main:1022 ] - [ DEBUG ] Using SLF4J as the default logging framework
2020-10-20 13:48:31 [ main:1030 ] - [ DEBUG ] -Dio.netty.eventLoopThreads: 16
2020-10-20 13:48:32 [ main:1049 ] - [ DEBUG ] -Dio.netty.noKeySetOptimization: false
2020-10-20 13:48:32 [ main:1049 ] - [ DEBUG ] -Dio.netty.selectorAutoRebuildThreshold: 512
2020-10-20 13:48:32 [ main:1062 ] - [ DEBUG ] Platform: MacOS
2020-10-20 13:48:32 [ main:1064 ] - [ DEBUG ] -Dio.netty.noUnsafe: false
2020-10-20 13:48:32 [ main:1065 ] - [ DEBUG ] Java version: 8
2020-10-20 13:48:32 [ main:1066 ] - [ DEBUG ] sun.misc.Unsafe.theUnsafe: available
2020-10-20 13:48:32 [ main:1066 ] - [ DEBUG ] sun.misc.Unsafe.copyMemory: available
2020-10-20 13:48:32 [ main:1067 ] - [ DEBUG ] java.nio.Buffer.address: available
2020-10-20 13:48:32 [ main:1068 ] - [ DEBUG ] direct buffer constructor: available
2020-10-20 13:48:32 [ main:1069 ] - [ DEBUG ] java.nio.Bits.unaligned: available, true
2020-10-20 13:48:32 [ main:1069 ] - [ DEBUG ] jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable prior to Java9
2020-10-20 13:48:32 [ main:1070 ] - [ DEBUG ] java.nio.DirectByteBuffer.<init>(long, int): available
2020-10-20 13:48:32 [ main:1070 ] - [ DEBUG ] sun.misc.Unsafe: available
2020-10-20 13:48:32 [ main:1071 ] - [ DEBUG ] -Dio.netty.tmpdir: /var/folders/5_/r8qvkv390xg943gpmgly5w1h0000gn/T (java.io.tmpdir)
2020-10-20 13:48:32 [ main:1071 ] - [ DEBUG ] -Dio.netty.bitMode: 64 (sun.arch.data.model)
2020-10-20 13:48:32 [ main:1072 ] - [ DEBUG ] -Dio.netty.noPreferDirect: false
2020-10-20 13:48:32 [ main:1073 ] - [ DEBUG ] -Dio.netty.maxDirectMemory: 3817865216 bytes
2020-10-20 13:48:32 [ main:1073 ] - [ DEBUG ] -Dio.netty.uninitializedArrayAllocationThreshold: -1
2020-10-20 13:48:32 [ main:1074 ] - [ DEBUG ] java.nio.ByteBuffer.cleaner(): available
2020-10-20 13:48:32 [ main:1082 ] - [ DEBUG ] org.jctools-core.MpscChunkedArrayQueue: available
2020-10-20 13:48:32 [ main:1116 ] - [ DEBUG ] -Dio.netty.leakDetection.level: simple
2020-10-20 13:48:32 [ main:1116 ] - [ DEBUG ] -Dio.netty.leakDetection.targetRecords: 4
2020-10-20 13:48:32 [ main:1120 ] - [ DEBUG ] -Dio.netty.allocator.numHeapArenas: 16
2020-10-20 13:48:32 [ main:1121 ] - [ DEBUG ] -Dio.netty.allocator.numDirectArenas: 16
2020-10-20 13:48:32 [ main:1122 ] - [ DEBUG ] -Dio.netty.allocator.pageSize: 8192
2020-10-20 13:48:32 [ main:1122 ] - [ DEBUG ] -Dio.netty.allocator.maxOrder: 11
2020-10-20 13:48:32 [ main:1122 ] - [ DEBUG ] -Dio.netty.allocator.chunkSize: 16777216
2020-10-20 13:48:32 [ main:1122 ] - [ DEBUG ] -Dio.netty.allocator.tinyCacheSize: 512
2020-10-20 13:48:32 [ main:1123 ] - [ DEBUG ] -Dio.netty.allocator.smallCacheSize: 256
2020-10-20 13:48:32 [ main:1124 ] - [ DEBUG ] -Dio.netty.allocator.normalCacheSize: 64
2020-10-20 13:48:32 [ main:1124 ] - [ DEBUG ] -Dio.netty.allocator.maxCachedBufferCapacity: 32768
2020-10-20 13:48:32 [ main:1124 ] - [ DEBUG ] -Dio.netty.allocator.cacheTrimInterval: 8192
2020-10-20 13:48:32 [ main:1124 ] - [ DEBUG ] -Dio.netty.allocator.useCacheForAllThreads: true
2020-10-20 13:48:32 [ main:1127 ] - [ DEBUG ] -Dio.netty.threadLocalMap.stringBuilder.initialSize: 1024
2020-10-20 13:48:32 [ main:1127 ] - [ DEBUG ] -Dio.netty.threadLocalMap.stringBuilder.maxSize: 4096
2020-10-20 13:48:32 [ main:1161 ] - [ DEBUG ] -Dio.netty.processId: 33162 (auto-detected)
2020-10-20 13:48:32 [ main:1163 ] - [ DEBUG ] -Djava.net.preferIPv4Stack: false
2020-10-20 13:48:32 [ main:1164 ] - [ DEBUG ] -Djava.net.preferIPv6Addresses: false
2020-10-20 13:48:32 [ main:1166 ] - [ DEBUG ] Loopback interface: lo0 (lo0, 0:0:0:0:0:0:0:1%lo0)
2020-10-20 13:48:32 [ main:1168 ] - [ DEBUG ] Failed to get SOMAXCONN from sysctl and file /proc/sys/net/core/somaxconn. Default: 128
2020-10-20 13:48:32 [ main:1172 ] - [ DEBUG ] -Dio.netty.machineId: ac:de:48:ff:fe:00:11:22 (auto-detected)
2020-10-20 13:48:32 [ main:1201 ] - [ DEBUG ] -Dio.netty.allocator.type: pooled
2020-10-20 13:48:32 [ main:1201 ] - [ DEBUG ] -Dio.netty.threadLocalDirectBufferSize: 0
2020-10-20 13:48:32 [ main:1201 ] - [ DEBUG ] -Dio.netty.maxThreadLocalCharBufferSize: 16384
2020-10-20 13:48:32 [ main:1258 ] - [ INFO ]  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:32 [ main:1265 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:32 [ main:1320 ] - [ INFO ]  [DUBBO] Dubbo service[null] mapped to interface name[com.sofwin.service.UserService]., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:32 [ main:1330 ] - [ INFO ]  [DUBBO] DubboBootstrap is ready., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:32 [ main:1330 ] - [ INFO ]  [DUBBO] DubboBootstrap has started., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:0 ] - [ DEBUG ] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@73a28541
2020-10-20 13:48:57 [ main:205 ] - [ INFO ] using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter
2020-10-20 13:48:57 [ main:263 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:48:57 [ main:294 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:48:57 [ main:295 ] - [ INFO ] The Infrastructure bean definition [Root bean: class [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigAliasPostProcessor]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=nullwith name [dubboConfigAliasPostProcessor] has been registered.
2020-10-20 13:48:57 [ main:301 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener , bean name : dubboLifecycleComponentApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-comsumer]; root of factory hierarchy]
2020-10-20 13:48:57 [ main:302 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:48:57 [ main:303 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener , bean name : dubboBootstrapApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-comsumer]; root of factory hierarchy]
2020-10-20 13:48:57 [ main:304 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:48:57 [ main:306 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener , bean name : dubboLifecycleComponentApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-comsumer,org.apache.dubbo.config.RegistryConfig]; root of factory hierarchy]
2020-10-20 13:48:57 [ main:306 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener] .
2020-10-20 13:48:57 [ main:307 ] - [ DEBUG ] The annotatedClass[class : org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener , bean name : dubboBootstrapApplicationListener] was present in registry[org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,dubboLifecycleComponentApplicationListener,dubboBootstrapApplicationListener,dubboConfigAliasPostProcessor,demo-comsumer,org.apache.dubbo.config.RegistryConfig]; root of factory hierarchy]
2020-10-20 13:48:57 [ main:307 ] - [ DEBUG ] DefaultListableBeanFactory will register annotated classes : [class org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener] .
2020-10-20 13:48:57 [ main:317 ] - [ DEBUG ] Loaded 11 bean definitions from class path resource [applicationContext.xml]
2020-10-20 13:48:57 [ main:341 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2020-10-20 13:48:57 [ main:391 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboConfigAliasPostProcessor'
2020-10-20 13:48:57 [ main:393 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
2020-10-20 13:48:57 [ main:396 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
2020-10-20 13:48:57 [ main:399 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
2020-10-20 13:48:57 [ main:400 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
2020-10-20 13:48:57 [ main:409 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboLifecycleComponentApplicationListener'
2020-10-20 13:48:57 [ main:421 ] - [ DEBUG ] Creating shared instance of singleton bean 'dubboBootstrapApplicationListener'
2020-10-20 13:48:57 [ main:503 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:503 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:504 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:504 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:504 ] - [ WARN ]  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:526 ] - [ DEBUG ] Creating shared instance of singleton bean 'demo-comsumer'
2020-10-20 13:48:57 [ main:575 ] - [ DEBUG ] Creating shared instance of singleton bean 'org.apache.dubbo.config.RegistryConfig'
2020-10-20 13:48:57 [ main:584 ] - [ DEBUG ] Creating shared instance of singleton bean 'userService'
2020-10-20 13:48:57 [ main:622 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:776 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:793 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:948 ] - [ INFO ]  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:968 ] - [ INFO ]  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:969 ] - [ INFO ]  [DUBBO] DubboBootstrap is starting..., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:974 ] - [ INFO ]  [DUBBO] DubboBootstrap is ready., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:57 [ main:974 ] - [ INFO ]  [DUBBO] DubboBootstrap has started., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ main:1025 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ main:1058 ] - [ DEBUG ] Using SLF4J as the default logging framework
2020-10-20 13:48:58 [ main:1061 ] - [ DEBUG ] -Dio.netty.eventLoopThreads: 16
2020-10-20 13:48:58 [ main:1084 ] - [ DEBUG ] -Dio.netty.noKeySetOptimization: false
2020-10-20 13:48:58 [ main:1085 ] - [ DEBUG ] -Dio.netty.selectorAutoRebuildThreshold: 512
2020-10-20 13:48:58 [ main:1104 ] - [ DEBUG ] Platform: MacOS
2020-10-20 13:48:58 [ main:1106 ] - [ DEBUG ] -Dio.netty.noUnsafe: false
2020-10-20 13:48:58 [ main:1106 ] - [ DEBUG ] Java version: 8
2020-10-20 13:48:58 [ main:1107 ] - [ DEBUG ] sun.misc.Unsafe.theUnsafe: available
2020-10-20 13:48:58 [ main:1109 ] - [ DEBUG ] sun.misc.Unsafe.copyMemory: available
2020-10-20 13:48:58 [ main:1110 ] - [ DEBUG ] java.nio.Buffer.address: available
2020-10-20 13:48:58 [ main:1111 ] - [ DEBUG ] direct buffer constructor: available
2020-10-20 13:48:58 [ main:1112 ] - [ DEBUG ] java.nio.Bits.unaligned: available, true
2020-10-20 13:48:58 [ main:1112 ] - [ DEBUG ] jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable prior to Java9
2020-10-20 13:48:58 [ main:1112 ] - [ DEBUG ] java.nio.DirectByteBuffer.<init>(long, int): available
2020-10-20 13:48:58 [ main:1113 ] - [ DEBUG ] sun.misc.Unsafe: available
2020-10-20 13:48:58 [ main:1113 ] - [ DEBUG ] -Dio.netty.tmpdir: /var/folders/5_/r8qvkv390xg943gpmgly5w1h0000gn/T (java.io.tmpdir)
2020-10-20 13:48:58 [ main:1113 ] - [ DEBUG ] -Dio.netty.bitMode: 64 (sun.arch.data.model)
2020-10-20 13:48:58 [ main:1115 ] - [ DEBUG ] -Dio.netty.noPreferDirect: false
2020-10-20 13:48:58 [ main:1115 ] - [ DEBUG ] -Dio.netty.maxDirectMemory: 3817865216 bytes
2020-10-20 13:48:58 [ main:1115 ] - [ DEBUG ] -Dio.netty.uninitializedArrayAllocationThreshold: -1
2020-10-20 13:48:58 [ main:1117 ] - [ DEBUG ] java.nio.ByteBuffer.cleaner(): available
2020-10-20 13:48:58 [ main:1125 ] - [ DEBUG ] org.jctools-core.MpscChunkedArrayQueue: available
2020-10-20 13:48:58 [ main:1141 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ main:1166 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ main:1208 ] - [ DEBUG ] -Dio.netty.leakDetection.level: simple
2020-10-20 13:48:58 [ main:1209 ] - [ DEBUG ] -Dio.netty.leakDetection.targetRecords: 4
2020-10-20 13:48:58 [ main:1212 ] - [ DEBUG ] -Dio.netty.allocator.numHeapArenas: 16
2020-10-20 13:48:58 [ main:1213 ] - [ DEBUG ] -Dio.netty.allocator.numDirectArenas: 16
2020-10-20 13:48:58 [ main:1214 ] - [ DEBUG ] -Dio.netty.allocator.pageSize: 8192
2020-10-20 13:48:58 [ main:1214 ] - [ DEBUG ] -Dio.netty.allocator.maxOrder: 11
2020-10-20 13:48:58 [ main:1214 ] - [ DEBUG ] -Dio.netty.allocator.chunkSize: 16777216
2020-10-20 13:48:58 [ main:1215 ] - [ DEBUG ] -Dio.netty.allocator.tinyCacheSize: 512
2020-10-20 13:48:58 [ main:1215 ] - [ DEBUG ] -Dio.netty.allocator.smallCacheSize: 256
2020-10-20 13:48:58 [ main:1216 ] - [ DEBUG ] -Dio.netty.allocator.normalCacheSize: 64
2020-10-20 13:48:58 [ main:1216 ] - [ DEBUG ] -Dio.netty.allocator.maxCachedBufferCapacity: 32768
2020-10-20 13:48:58 [ main:1216 ] - [ DEBUG ] -Dio.netty.allocator.cacheTrimInterval: 8192
2020-10-20 13:48:58 [ main:1216 ] - [ DEBUG ] -Dio.netty.allocator.useCacheForAllThreads: true
2020-10-20 13:48:58 [ main:1220 ] - [ DEBUG ] -Dio.netty.threadLocalMap.stringBuilder.initialSize: 1024
2020-10-20 13:48:58 [ main:1220 ] - [ DEBUG ] -Dio.netty.threadLocalMap.stringBuilder.maxSize: 4096
2020-10-20 13:48:58 [ main:1254 ] - [ DEBUG ] -Dio.netty.processId: 33172 (auto-detected)
2020-10-20 13:48:58 [ main:1256 ] - [ DEBUG ] -Djava.net.preferIPv4Stack: false
2020-10-20 13:48:58 [ main:1256 ] - [ DEBUG ] -Djava.net.preferIPv6Addresses: false
2020-10-20 13:48:58 [ main:1258 ] - [ DEBUG ] Loopback interface: lo0 (lo0, 0:0:0:0:0:0:0:1%lo0)
2020-10-20 13:48:58 [ main:1259 ] - [ DEBUG ] Failed to get SOMAXCONN from sysctl and file /proc/sys/net/core/somaxconn. Default: 128
2020-10-20 13:48:58 [ main:1262 ] - [ DEBUG ] -Dio.netty.machineId: ac:de:48:ff:fe:00:11:22 (auto-detected)
2020-10-20 13:48:58 [ main:1281 ] - [ DEBUG ] -Dio.netty.allocator.type: pooled
2020-10-20 13:48:58 [ main:1281 ] - [ DEBUG ] -Dio.netty.threadLocalDirectBufferSize: 0
2020-10-20 13:48:58 [ main:1281 ] - [ DEBUG ] -Dio.netty.maxThreadLocalCharBufferSize: 16384
2020-10-20 13:48:58 [ NettyServerWorker-3-1:27363 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:52453 -> /192.168.0.130:20880 is established., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ NettyClientWorker-1-1:1338 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:52453 -> /192.168.0.130:20880 is established., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ main:1345 ] - [ INFO ]  [DUBBO] Successed connect to server /192.168.0.130:20880 from NettyClient 192.168.0.130 using dubbo version 2.7.7, channel is NettyChannel [channel=[id: 0x0cae0d66, L:/192.168.0.130:52453 - R:/192.168.0.130:20880]], dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ main:1345 ] - [ INFO ]  [DUBBO] Start NettyClient dengchenyang-mbp/192.168.0.130 connect to the server /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ main:1362 ] - [ DEBUG ]  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ main:1368 ] - [ INFO ]  [DUBBO] Refer dubbo service com.sofwin.service.UserService from url localhost:20880/com.sofwin.service.UserService?application=demo-comsumer&init=false&interface=com.sofwin.service.UserService&pid=33172&register.ip=192.168.0.130&remote.application=&side=consumer&sticky=false, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ main:1444 ] - [ DEBUG ] -Dio.netty.recycler.maxCapacityPerThread: 4096
2020-10-20 13:48:58 [ main:1445 ] - [ DEBUG ] -Dio.netty.recycler.maxSharedCapacityFactor: 2
2020-10-20 13:48:58 [ main:1445 ] - [ DEBUG ] -Dio.netty.recycler.linkCapacity: 16
2020-10-20 13:48:58 [ main:1445 ] - [ DEBUG ] -Dio.netty.recycler.ratio: 8
2020-10-20 13:48:58 [ NettyClientWorker-1-1:1455 ] - [ DEBUG ] -Dio.netty.buffer.bytebuf.checkAccessible: true
2020-10-20 13:48:58 [ NettyClientWorker-1-1:1457 ] - [ DEBUG ] Loaded default ResourceLeakDetector: io.netty.util.ResourceLeakDetector@77c7092d
2020-10-20 13:48:58 [ NettyServerWorker-3-1:27559 ] - [ DEBUG ] -Dio.netty.recycler.maxCapacityPerThread: 4096
2020-10-20 13:48:58 [ NettyServerWorker-3-1:27559 ] - [ DEBUG ] -Dio.netty.recycler.maxSharedCapacityFactor: 2
2020-10-20 13:48:58 [ NettyServerWorker-3-1:27559 ] - [ DEBUG ] -Dio.netty.recycler.linkCapacity: 16
2020-10-20 13:48:58 [ NettyServerWorker-3-1:27559 ] - [ DEBUG ] -Dio.netty.recycler.ratio: 8
2020-10-20 13:48:58 [ NettyServerWorker-3-1:27567 ] - [ DEBUG ] -Dio.netty.buffer.bytebuf.checkAccessible: true
2020-10-20 13:48:58 [ NettyServerWorker-3-1:27568 ] - [ DEBUG ] Loaded default ResourceLeakDetector: io.netty.util.ResourceLeakDetector@5a94c52e
2020-10-20 13:48:58 [ DubboServerHandler-192.168.0.130:20880-thread-2:27635 ] - [ DEBUG ]  [DUBBO] Decode decodeable message org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ main:1618 ] - [ DEBUG ]  [DUBBO] Decoding in thread -- [main#1], dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ main:1624 ] - [ DEBUG ]  [DUBBO] Decode decodeable message org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ SpringContextShutdownHook:1627 ] - [ DEBUG ] Closing org.springframework.context.support.ClassPathXmlApplicationContext@73a28541, started on Tue Oct 20 13:48:57 CST 2020
2020-10-20 13:48:58 [ DubboShutdownHook:1627 ] - [ INFO ]  [DUBBO] Run shutdown hook now., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ DubboShutdownHook:1629 ] - [ INFO ]  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ SpringContextShutdownHook:1629 ] - [ INFO ]  [DUBBO] Close all registries [], dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ SpringContextShutdownHook:1630 ] - [ INFO ]  [DUBBO] Close dubbo connect: /192.168.0.130:52453-->/192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ SpringContextShutdownHook:1630 ] - [ INFO ]  [DUBBO] Close netty channel [id: 0x0cae0d66, L:/192.168.0.130:52453 - R:/192.168.0.130:20880], dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ SpringContextShutdownHook:1632 ] - [ INFO ]  [DUBBO] Destroy reference: localhost:20880/com.sofwin.service.UserService?application=demo-comsumer&init=false&interface=com.sofwin.service.UserService&pid=33172&register.ip=192.168.0.130&remote.application=&side=consumer&sticky=false, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ NettyClientWorker-1-1:1638 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:52453 -> /192.168.0.130:20880 is disconnected., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ Dubbo-thread-1:1638 ] - [ DEBUG ]  [DUBBO] disconnected from /192.168.0.130:20880,url:localhost:20880/com.sofwin.service.UserService?application=demo-comsumer&codec=dubbo&heartbeat=60000&init=false&interface=com.sofwin.service.UserService&pid=33172&register.ip=192.168.0.130&remote.application=&side=consumer&sticky=false, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ NettyServerWorker-3-1:27680 ] - [ WARN ]  [DUBBO] All clients has disconnected from /192.168.0.130:20880. You can graceful shutdown now., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ NettyServerWorker-3-1:27680 ] - [ INFO ]  [DUBBO] The connection of /192.168.0.130:52453 -> /192.168.0.130:20880 is disconnected., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ DubboServerHandler-192.168.0.130:20880-thread-3:27680 ] - [ DEBUG ]  [DUBBO] disconnected from /192.168.0.130:52453,url:dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider02&bind.ip=192.168.0.130&bind.port=20880&channel.readonly.sent=true&codec=dubbo&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.sofwin.service.UserService&methods=hello&pid=33162&release=2.7.7&side=provider&threadname=DubboServerHandler-192.168.0.130:20880&timestamp=1603172911833, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ SpringContextShutdownHook:1641 ] - [ DEBUG ]  [DUBBO] DubboBootstrap's all ServiceDiscoveries have been destroyed., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ SpringContextShutdownHook:1642 ] - [ DEBUG ]  [DUBBO] DubboBootstrap's configs have been clear., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:48:58 [ SpringContextShutdownHook:1642 ] - [ INFO ]  [DUBBO] DubboBootstrap is about to shutdown..., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:49:06 [ DubboShutdownHook:35161 ] - [ INFO ]  [DUBBO] Run shutdown hook now., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:49:06 [ SpringContextShutdownHook:35162 ] - [ DEBUG ] Closing org.springframework.context.support.ClassPathXmlApplicationContext@73a28541, started on Tue Oct 20 13:48:30 CST 2020
2020-10-20 13:49:06 [ DubboShutdownHook:35164 ] - [ INFO ]  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:49:06 [ SpringContextShutdownHook:35164 ] - [ INFO ]  [DUBBO] Close all registries [], dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:49:06 [ SpringContextShutdownHook:35165 ] - [ INFO ]  [DUBBO] Close dubbo server: /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:49:06 [ SpringContextShutdownHook:35166 ] - [ INFO ]  [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /192.168.0.130:20880, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:49:06 [ SpringContextShutdownHook:35168 ] - [ INFO ]  [DUBBO] Unexport service: dubbo://192.168.0.130:20880/com.sofwin.service.UserService?anyhost=true&application=demo-provider02&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=33162&release=2.7.7&side=provider&timestamp=1603172911833, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:49:06 [ SpringContextShutdownHook:35168 ] - [ INFO ]  [DUBBO] Unexport service: injvm://127.0.0.1/com.sofwin.service.UserService?anyhost=true&application=demo-provider02&bind.ip=192.168.0.130&bind.port=20880&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.sofwin.service.UserService&methods=hello&pid=33162&release=2.7.7&side=provider&timestamp=1603172911833, dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:49:06 [ NettyServerWorker-3-1:35169 ] - [ DEBUG ] Freed 2 thread-local buffer(s) from thread: NettyServerWorker-3-1
2020-10-20 13:49:06 [ SpringContextShutdownHook:35174 ] - [ DEBUG ]  [DUBBO] DubboBootstrap's all ServiceDiscoveries have been destroyed., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:49:06 [ SpringContextShutdownHook:35175 ] - [ DEBUG ]  [DUBBO] DubboBootstrap's configs have been clear., dubbo version: 2.7.7, current host: 192.168.0.130
2020-10-20 13:49:06 [ SpringContextShutdownHook:35175 ] - [ INFO ]  [DUBBO] DubboBootstrap is about to shutdown..., dubbo version: 2.7.7, current host: 192.168.0.130
